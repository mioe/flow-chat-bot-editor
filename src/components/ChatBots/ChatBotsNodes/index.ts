import {
	defineNode,
	NodeInterface,
	defineDynamicNode,
	DynamicNodeDefinition,
} from 'baklavajs'
import { allowMultipleConnections } from '@baklavajs/engine'
import { ButtonInterface, SwitchInterface } from '~/components/ChatBots/ChatBotsInterfaces'

const DEFAULT_NODE_WIDTH = 369

export const StartNode = defineNode({
	type: 'StartNode',
	title: '–°—Ç–∞—Ä—Ç',
	onCreate() {
		// @ts-ignore
		this.width = DEFAULT_NODE_WIDTH
	},
	outputs: {
		output1: () => new NodeInterface('–î–∞ (output1)', 0),
		output2: () => new NodeInterface('–ö–∞–±–∞—á–æ–∫ (output2)', 0),
		output3: () => new NodeInterface('–î—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç (output3)', 0),
		output4: () => new NodeInterface('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ 3 —á–∞—Å–∞ (output4)', 0),
	},
})

export const ActionNode = defineNode({
	type: 'ActionNode',
	title: '–î–µ–π—Å—Ç–≤–∏–µ',
	onCreate() {
		// @ts-ignore
		this.width = DEFAULT_NODE_WIDTH
	},
	inputs: {
		input: () => new NodeInterface('socket', []).use(allowMultipleConnections),
	},
})

export const IdleNode = defineNode({
	type: 'IdleNode',
	title: '–ó–∞–¥–µ—Ä–∂–∫–∞',
	onCreate() {
		// @ts-ignore
		this.width = DEFAULT_NODE_WIDTH
	},
	inputs: {
		input: () => new NodeInterface('socket', []).use(allowMultipleConnections),
	},
	outputs: {
		output: () => new NodeInterface('–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (output)', 0),
	},
})

export const IfNode = defineNode({
	type: 'IfNode',
	title: '–£—Å–ª–æ–≤–∏–µ',
	onCreate() {
		// @ts-ignore
		this.width = DEFAULT_NODE_WIDTH
	},
	inputs: {
		input: () => new NodeInterface('socket', []).use(allowMultipleConnections),
	},
})

export const MessageNode = defineDynamicNode({
	type: 'MessageNode',
	title: '–°–æ–æ–±—â–µ–Ω–∏–µ',
	onCreate() {
		// @ts-ignore
		this.width = DEFAULT_NODE_WIDTH
		// @ts-ignore
		this.counter = 0
	},
	inputs: {
		input: () => new NodeInterface('socket', []).use(allowMultipleConnections),
	},
	outputs: {
		enabled: () => new SwitchInterface({
			name: '–ö–Ω–æ–ø–∫–∏-–æ—Ç–≤–µ—Ç—ã',
			value: false,
		}),
	},
	onUpdate(_, { enabled }) {
		// @ts-ignore
		console.log('ü¶ï onUpdate', enabled)
		if (!enabled) {
			return {
				outputs: {
					output: () => new NodeInterface('–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥', undefined),
				} as DynamicNodeDefinition,
			}
		}
		return {
			outputs: {
				add: () => new ButtonInterface({
					name: '–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ö–æ–¥',
					callback: () => {
						// @ts-ignore
						const name = 'Output ' + ++this.counter
						// @ts-ignore
						this.addOutput(name, new NodeInterface<any>(name, undefined))
					},
					icon: 'IconAddMd',
				}),
				remove: () => new ButtonInterface({
					name: '–£–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥',
					callback: () => {
						// @ts-ignore
						this.removeOutput('Output ' + this.counter--)
					}
				}),

				anotherAnswer: () => new NodeInterface('–î—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç', undefined),
				idle: () => new NodeInterface('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ X –º–∏–Ω—É—Ç', null),
			} as DynamicNodeDefinition,
		}
	},
	calculate: undefined,
})

export const InputNode = defineNode({
	type: 'InputNode',
	title: '–í–ª–æ–∂–µ–Ω–∏–µ',
	onCreate() {
		// @ts-ignore
		this.width = DEFAULT_NODE_WIDTH
	},
	inputs: {
		input: () => new NodeInterface('socket', []).use(allowMultipleConnections),
	},
})

export const RedirectNode = defineNode({
	type: 'RedirectNode',
	title: '–î—Ä—É–≥–æ–π –±–æ—Ç',
	onCreate() {
		// @ts-ignore
		this.width = DEFAULT_NODE_WIDTH
	},
	inputs: {
		input: () => new NodeInterface('socket', []).use(allowMultipleConnections),
	},
})

export const TemplateWabaNode = defineNode({
	type: 'TemplateWabaNode',
	title: '–®–∞–±–ª–æ–Ω WABA',
	onCreate() {
		// @ts-ignore
		this.width = DEFAULT_NODE_WIDTH
	},
	inputs: {
		input: () => new NodeInterface('socket', []).use(allowMultipleConnections),
	},
	outputs: {
		output: () => new NodeInterface('–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (output)', 0),
	},
})
